// <auto-generated />
using System;
using DriveEasee.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveEasee.Migrations
{
    [DbContext(typeof(DriveEaseContext))]
    [Migration("20240514091235_AddIdentityTables")]
    partial class AddIdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DriveEasee.Models.Aluguer", b =>
                {
                    b.Property<int>("IdAluguer")
                        .HasColumnType("int")
                        .HasColumnName("id_aluguer");

                    b.Property<int>("CarroIdCarro")
                        .HasColumnType("int")
                        .HasColumnName("carro_id_carro");

                    b.Property<int>("CaucaoIdCaucao")
                        .HasColumnType("int")
                        .HasColumnName("caucao_id_caucao");

                    b.Property<int>("ClienteIdCliente")
                        .HasColumnType("int")
                        .HasColumnName("cliente_id_cliente");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime")
                        .HasColumnName("data_fim");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("date")
                        .HasColumnName("data_inicio");

                    b.Property<int>("DriveEaseIdDriveEase")
                        .HasColumnType("int")
                        .HasColumnName("drive_ease_id_drive_ease");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("valor");

                    b.HasKey("IdAluguer")
                        .HasName("PK__aluguer__9A65BA21F8375203");

                    b.ToTable("aluguer", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Carro", b =>
                {
                    b.Property<int>("IdCarro")
                        .HasColumnType("int")
                        .HasColumnName("id_carro");

                    b.Property<int>("CategoriaCarroIdCategoriaCarro")
                        .HasColumnType("int")
                        .HasColumnName("categoria_carro_id_categoria_carro");

                    b.Property<int>("EstadoCarroIdEstadoCarro")
                        .HasColumnType("int")
                        .HasColumnName("estado_carro_id_estado_carro");

                    b.Property<int?>("Lotacao")
                        .HasColumnType("int")
                        .HasColumnName("lotacao");

                    b.Property<string>("Matricula")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("matricula");

                    b.Property<int>("ModeloIdModelo")
                        .HasColumnType("int")
                        .HasColumnName("modelo_id_modelo");

                    b.Property<int?>("Tara")
                        .HasColumnType("int")
                        .HasColumnName("tara");

                    b.HasKey("IdCarro")
                        .HasName("PK__carro__D3C318A10909D54C");

                    b.ToTable("carro", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.CategoriaCarro", b =>
                {
                    b.Property<int>("IdCategoriaCarro")
                        .HasColumnType("int")
                        .HasColumnName("id_categoria_carro");

                    b.Property<int>("ModeloIdModelo")
                        .HasColumnType("int")
                        .HasColumnName("modelo_id_modelo");

                    b.Property<string>("NomeCategoria")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_categoria");

                    b.HasKey("IdCategoriaCarro")
                        .HasName("PK__categori__59AE7B044CDE2050");

                    b.ToTable("categoria_carro", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Caucao", b =>
                {
                    b.Property<int>("IdCaucao")
                        .HasColumnType("int")
                        .HasColumnName("id_caucao");

                    b.Property<string>("Estado")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("estado");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("valor");

                    b.HasKey("IdCaucao")
                        .HasName("PK__caucao__5B5579FF632FD639");

                    b.ToTable("caucao", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    b.Property<int>("CpostalIdCpostal")
                        .HasColumnType("int")
                        .HasColumnName("cpostal_id_cpostal");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Morada")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("morada");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome");

                    b.Property<int?>("Ntelemovel")
                        .HasColumnType("int")
                        .HasColumnName("ntelemovel");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.HasKey("IdCliente")
                        .HasName("PK__cliente__677F38F50C78B6CE");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Cpostal", b =>
                {
                    b.Property<int>("IdCpostal")
                        .HasColumnType("int")
                        .HasColumnName("id_cpostal");

                    b.Property<int?>("Fim")
                        .HasColumnType("int")
                        .HasColumnName("fim");

                    b.Property<int?>("Inicio")
                        .HasColumnType("int")
                        .HasColumnName("inicio");

                    b.Property<string>("Localizacao")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("localizacao");

                    b.HasKey("IdCpostal")
                        .HasName("PK__cpostal__7ACC4223750B364B");

                    b.ToTable("cpostal", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Devolucao", b =>
                {
                    b.Property<int>("IdDevolucao")
                        .HasColumnType("int")
                        .HasColumnName("id_devolucao");

                    b.Property<int>("AluguerIdAluguer")
                        .HasColumnType("int")
                        .HasColumnName("aluguer_id_aluguer");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateTime?>("Hora")
                        .HasColumnType("datetime")
                        .HasColumnName("hora");

                    b.Property<int>("TecnicoIdTecnico")
                        .HasColumnType("int")
                        .HasColumnName("tecnico_id_tecnico");

                    b.Property<string>("Tipo")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("tipo");

                    b.Property<decimal?>("ValorExtra")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("valor_extra");

                    b.HasKey("IdDevolucao")
                        .HasName("PK__devoluca__F014558F1407260A");

                    b.ToTable("devolucao", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.DriveEases", b =>
                {
                    b.Property<int>("IdDriveEase")
                        .HasColumnType("int")
                        .HasColumnName("id_drive_ease");

                    b.Property<int>("CpostalIdCpostal")
                        .HasColumnType("int")
                        .HasColumnName("cpostal_id_cpostal");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Morada")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("morada");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome");

                    b.Property<int?>("Ntelemovel")
                        .HasColumnType("int")
                        .HasColumnName("ntelemovel");

                    b.HasKey("IdDriveEase")
                        .HasName("PK__drive_ea__D35F3F4AECA266BE");

                    b.ToTable("drive_ease", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Entrega", b =>
                {
                    b.Property<int>("IdEntrega")
                        .HasColumnType("int")
                        .HasColumnName("id_entrega");

                    b.Property<int>("AluguerIdAluguer")
                        .HasColumnType("int")
                        .HasColumnName("aluguer_id_aluguer");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateTime?>("Hora")
                        .HasColumnType("datetime")
                        .HasColumnName("hora");

                    b.Property<int>("TecnicoIdTecnico")
                        .HasColumnType("int")
                        .HasColumnName("tecnico_id_tecnico");

                    b.HasKey("IdEntrega")
                        .HasName("PK__entrega__017C2C8A32F4789C");

                    b.ToTable("entrega", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.EstadoCarro", b =>
                {
                    b.Property<int>("IdEstadoCarro")
                        .HasColumnType("int")
                        .HasColumnName("id_estado_carro");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome");

                    b.HasKey("IdEstadoCarro")
                        .HasName("PK__estado_c__6F179939137618E1");

                    b.ToTable("estado_carro", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Fatura", b =>
                {
                    b.Property<int>("IdFatura")
                        .HasColumnType("int")
                        .HasColumnName("id_fatura");

                    b.Property<int>("PagamentoIdPagamento")
                        .HasColumnType("int")
                        .HasColumnName("pagamento_id_pagamento");

                    b.HasKey("IdFatura")
                        .HasName("PK__fatura__F4902DCBEC611D31");

                    b.ToTable("fatura", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Manutencao", b =>
                {
                    b.Property<int>("IdManutencao")
                        .HasColumnType("int")
                        .HasColumnName("id_manutencao");

                    b.Property<int>("CarroIdCarro")
                        .HasColumnType("int")
                        .HasColumnName("carro_id_carro");

                    b.Property<decimal?>("Custo")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("custo");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<DateTime?>("Hora")
                        .HasColumnType("datetime")
                        .HasColumnName("hora");

                    b.Property<string>("Proposito")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("proposito");

                    b.HasKey("IdManutencao")
                        .HasName("PK__manutenc__5F9D64EE5867C87B");

                    b.ToTable("manutencao", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .HasColumnType("int")
                        .HasColumnName("id_marca");

                    b.Property<string>("NomeMarca")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_marca");

                    b.HasKey("IdMarca")
                        .HasName("PK__marca__7E43E99EE697C484");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Modelo", b =>
                {
                    b.Property<int>("IdModelo")
                        .HasColumnType("int")
                        .HasColumnName("id_modelo");

                    b.Property<int>("MarcaIdMarca")
                        .HasColumnType("int")
                        .HasColumnName("marca_id_marca");

                    b.Property<string>("NomeModelo")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_modelo");

                    b.HasKey("IdModelo")
                        .HasName("PK__modelo__B3BFCFF1C7735D1C");

                    b.ToTable("modelo", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Pagamento", b =>
                {
                    b.Property<int>("IdPagamento")
                        .HasColumnType("int")
                        .HasColumnName("id_pagamento");

                    b.Property<int>("AluguerIdAluguer")
                        .HasColumnType("int")
                        .HasColumnName("aluguer_id_aluguer");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("date")
                        .HasColumnName("data");

                    b.Property<string>("Metodo")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("metodo");

                    b.Property<int>("TipoPagamentoIdTipoPagamento")
                        .HasColumnType("int")
                        .HasColumnName("tipo_pagamento_id_tipo_pagamento");

                    b.Property<string>("Valor")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("valor");

                    b.HasKey("IdPagamento")
                        .HasName("PK__pagament__3A2D33F72137B179");

                    b.ToTable("pagamento", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Review", b =>
                {
                    b.Property<int>("IdReview")
                        .HasColumnType("int")
                        .HasColumnName("id_review");

                    b.Property<int>("AluguerIdAluguer")
                        .HasColumnType("int")
                        .HasColumnName("aluguer_id_aluguer");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("observacoes");

                    b.HasKey("IdReview")
                        .HasName("PK__review__2F79F8C720E6BE66");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.Tecnico", b =>
                {
                    b.Property<int>("IdTecnico")
                        .HasColumnType("int")
                        .HasColumnName("id_tecnico");

                    b.Property<int>("CpostalIdCpostal")
                        .HasColumnType("int")
                        .HasColumnName("cpostal_id_cpostal");

                    b.Property<string>("Email")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Morada")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("morada");

                    b.Property<string>("Nome")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome");

                    b.Property<int?>("Ntelemovel")
                        .HasColumnType("int")
                        .HasColumnName("ntelemovel");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.HasKey("IdTecnico")
                        .HasName("PK__tecnico__D550973742A1F47B");

                    b.ToTable("tecnico", (string)null);
                });

            modelBuilder.Entity("DriveEasee.Models.TipoPagamento", b =>
                {
                    b.Property<int>("IdTipoPagamento")
                        .HasColumnType("int")
                        .HasColumnName("id_tipo_pagamento");

                    b.Property<string>("NomeTipo")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nome_tipo");

                    b.HasKey("IdTipoPagamento")
                        .HasName("PK__tipo_pag__01B984C7806933CE");

                    b.ToTable("tipo_pagamento", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
