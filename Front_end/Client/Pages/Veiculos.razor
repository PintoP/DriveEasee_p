@page "/veiculos"

@using MyBlazorApp.Client.Services;
@inject ApiService ApiService
@using DriveEasee.Models

<h2>Veículos</h2>
<div class="search-bar">
    <input type="text" @bind="searchTerm" placeholder="Pesquisar por nome ou matrícula">
    <button @onclick="SearchVehicles"><img src="search-icon.png" alt="Procurar"></button>
</div>
<div id="veiculos-list" class="vehicle-list">
    @if (veiculos == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!veiculos.Any())
    {
        <p>Nenhum veículo encontrado.</p>
    }
    else
    {
        @foreach (var vehicle in veiculos)
        {
            <div class="vehicle-item">
               
                <div class="vehicle-details">
                    <p class="vehicle-name"><strong>Nome:</strong> @vehicle.Matricula</p>
                    <p class="vehicle-model"><strong>Modelo:</strong> @vehicle.ModeloIdModelo</p>
                    <p class="vehicle-year"><strong>Ano:</strong> @vehicle.Tara</p>
                    <p class="vehicle-price"><strong>Preço:</strong> @vehicle.CategoriaCarroIdCategoriaCarro</p>
                </div>
                <a href="descricao_carro.html" class="view-vehicle">Ver Veículo</a>
            </div>
        }
    }
</div>
<div class="pagination">
    <button class="pagination-button" @onclick="PreviousPage" disabled="@(!canGoPrevious)">Anterior</button>
    <button class="pagination-button active">1</button>
    <button class="pagination-button" @onclick="NextPage" disabled="@(!canGoNext)">Próximo</button>
</div>

@code {
    private List<Carro> veiculos;
    private string searchTerm;
    private int currentPage = 1;
    private bool canGoPrevious => currentPage > 1;
    private bool canGoNext => veiculos != null && veiculos.Count >= itemsPerPage;
    private const int itemsPerPage = 10;

    protected override async Task OnInitializedAsync()
    {
        await FetchAndRenderVehicles();
    }

    private async Task FetchAndRenderVehicles()
    {
        try
        {
            veiculos = await ApiService.GetAsync<List<Carro>>($"api/Carro?page={currentPage}&itemsPerPage={itemsPerPage}");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Erro ao buscar os dados de veículos: " + ex.Message);
        }
    }

    private async Task SearchVehicles()
    {
        currentPage = 1;
        await FetchAndRenderVehicles();
    }

    private async Task PreviousPage()
    {
        if (canGoPrevious)
        {
            currentPage--;
            await FetchAndRenderVehicles();
        }
    }

    private async Task NextPage()
    {
        if (canGoNext)
        {
            currentPage++;
            await FetchAndRenderVehicles();
        }
    }
}
